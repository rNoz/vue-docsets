(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[50],{"3c77":function(t,e,s){"use strict";s.r(e);var a=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("doc-page",{attrs:{title:"Commit Conventions",nav:t.nav}},[s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"Goals"},on:{click:function(e){return t.copyHeading("Goals")}}},[t._v("Goals")]),s("ul",[s("li",[t._v("Allow ignoring commits by git bisect (not important commits like formatting)")]),s("li",[t._v("Provide better information when browsing the history")])]),s("div",{staticClass:"doc-note doc-note--warning"},[s("p",{staticClass:"doc-note__title"},[t._v("WARNING")]),s("p",[t._v("This rule applies to ALL "),s("doc-link",{attrs:{to:"https://github.com/quasarframework"}},[t._v("Quasar repositories")]),t._v(".")],1)]),s("p",[t._v("Well-cared log is a beautiful and useful thing. "),s("code",{staticClass:"doc-token"},[t._v("git blame")]),t._v(", "),s("code",{staticClass:"doc-token"},[t._v("revert")]),t._v(", "),s("code",{staticClass:"doc-token"},[t._v("rebase")]),t._v(", "),s("code",{staticClass:"doc-token"},[t._v("log")]),t._v(", "),s("code",{staticClass:"doc-token"},[t._v("shortlog")]),t._v(" and other subcommands come to life. Reviewing others’ commits and pull requests becomes something worth doing, and suddenly can be done independently. Understanding why something happened months or years ago becomes not only possible but efficient.")]),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"The-Rules-of-a-Great-Git-Commit-Message"},on:{click:function(e){return t.copyHeading("The-Rules-of-a-Great-Git-Commit-Message")}}},[t._v("The Rules of a Great Git Commit Message")]),s("ol",[s("li",[t._v("Separate subject from body with a blank line")]),s("li",[t._v("Limit the subject line to 70 characters")]),s("li",[t._v("Capitalize the subject line")]),s("li",[t._v("Do not end the subject line with a period")]),s("li",[t._v("Use the imperative mood in the subject line")]),s("li",[t._v("Wrap the body at 80 characters")]),s("li",[t._v("Use the body to explain what and why vs. how")])]),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"Format-of-a-Commit-Message"},on:{click:function(e){return t.copyHeading("Format-of-a-Commit-Message")}}},[t._v("Format of a Commit Message")]),s("pre",{pre:!0,attrs:{class:"doc-code language-js"}},[s("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-js"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("scope"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Subject"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" #"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("github"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ref"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("footer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),s("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Example-of-a-Commit-Message"},on:{click:function(e){return t.copyHeading("Example-of-a-Commit-Message")}}},[t._v("Example of a Commit Message")]),s("pre",{pre:!0,attrs:{class:"doc-code language-js"}},[s("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-js"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fix")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ui"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Ensure Range headers adhere more closely to "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RFC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2616")]),t._v(" #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2310")]),t._v("\n\nTo add "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dependency")]),t._v(" use "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("range-parser")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("to compute the range"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nIt is more well"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("tested "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the wild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BREAKING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CHANGE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\nport"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("runner command line option has changed to runner"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nTo migrate your project"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" change all the commands"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nwhere you use "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("runner to "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("runner"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"Message-Subject-(First-Line)"},on:{click:function(e){t.copyHeading("Message-Subject-(First-Line)")}}},[t._v("Message Subject (First Line)")]),s("p",[t._v("The first line cannot be longer than 70 characters, the second line is always blank. The type and scope should always be lowercase as shown below.")]),s("p",[s("strong",[t._v("Allowed "),s("code",{staticClass:"doc-token"},[t._v("<type>")]),t._v(" values:")])]),s("ul",[s("li",[s("strong",[t._v("feat")]),t._v(" - new feature for the user, not a new feature for build script")]),s("li",[s("strong",[t._v("fix")]),t._v(" - bug fix for the user, not a fix to a build script")]),s("li",[s("strong",[t._v("docs")]),t._v(" - documentation only changes")]),s("li",[s("strong",[t._v("style")]),t._v(" - changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)")]),s("li",[s("strong",[t._v("refactor")]),t._v(" - refactoring production code, a code change that neither fixes a bug nor adds a feature")]),s("li",[s("strong",[t._v("chore")]),t._v(" - other changes that don’t modify src or test files; no production code change")]),s("li",[s("strong",[t._v("perf")]),t._v(" - change that improves performance")]),s("li",[s("strong",[t._v("revert")]),t._v(" - reverts a previous commit")]),s("li",[s("strong",[t._v("test")]),t._v(" - adding missing tests, refactoring tests; no production code change")]),s("li",[s("strong",[t._v("build")]),t._v(" - changes that affect the build system or external dependencies (example scopes: gulp, npm)")]),s("li",[s("strong",[t._v("ci")]),t._v(" - changes to our Continuous Integrations configuration files and scripts (example scopes: Travis, Circle CI)")])]),s("p",[s("strong",[t._v("Example "),s("code",{staticClass:"doc-token"},[t._v("<scope>")]),t._v(" values:")])]),s("ul",[s("li",[t._v("ui, cli, api, touchswipe, qtime, etc.")])]),s("div",{staticClass:"doc-note doc-note--tip"},[s("p",{staticClass:"doc-note__title"},[t._v("TIP")]),s("p",[t._v("The "),s("code",{staticClass:"doc-token"},[t._v("<scope>")]),t._v(" can contain more values separated by comma. Example: "),s("code",{staticClass:"doc-token"},[t._v("fix(ui,cli): Cordova mode added")]),t._v(".")]),s("p",[t._v("The "),s("code",{staticClass:"doc-token"},[t._v("<scope>")]),t._v(" can be empty (e.g. if the change is a global), in which case the parentheses are omitted.")])]),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"Message-Body"},on:{click:function(e){return t.copyHeading("Message-Body")}}},[t._v("Message Body")]),s("ul",[s("li",[t._v("uses the imperative, present tense: “change” not “changed” nor “changes”")]),s("li",[t._v("includes motivation for the change and contrasts with previous behavior")])]),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"Message-Footer"},on:{click:function(e){return t.copyHeading("Message-Footer")}}},[t._v("Message Footer")]),s("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Breaking-Changes"},on:{click:function(e){return t.copyHeading("Breaking-Changes")}}},[t._v("Breaking Changes")]),s("p",[t._v("All breaking changes have to be mentioned as a breaking change block in the footer, which should start with the word BREAKING CHANGE: with a space or two newlines. The rest of the commit message is then the description of the change, justification and migration notes.")]),s("pre",{pre:!0,attrs:{class:"doc-code language-js"}},[s("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-js"}},[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BREAKING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CHANGE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" isolate scope bindings definition has changed and\n    the inject option "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the directive controller injection was removed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n    To migrate the code follow the example below"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\n    Before"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\n    scope"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      myAttr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'attribute'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      myBind"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bind'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      myExpression"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'expression'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      myEval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'evaluate'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      myAccessor"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'accessor'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    After"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\n    scope"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      myAttr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      myBind"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      myExpression"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// myEval - usually not useful, but in cases where the expression is assignable, you can use '='")]),t._v("\n      myAccessor"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'='")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in directive's template change myAccessor() to myAccessor")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),s("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Referencing-Issues"},on:{click:function(e){return t.copyHeading("Referencing-Issues")}}},[t._v("Referencing Issues")]),s("p",[t._v("Closed issues should be listed on a separate line in the footer prefixed with “Closes” keyword like this:")]),s("p",[s("code",{staticClass:"doc-token"},[t._v("Closes #234")])]),s("p",[t._v("or in the case of multiple issues:")]),s("p",[s("code",{staticClass:"doc-token"},[t._v("Closes #123, #245, #992")])])])},n=[],o=s("8669"),r="Commit Conventions | Quasar Framework",i="Play with Quasar on a jsFiddle, Codepen or Codesandbox templates.",c={meta:{title:"Commit Conventions",meta:{title:{name:"title",content:r},ogTitle:{name:"og:title",content:r},twitterTitle:{name:"twitter:title",content:r},description:{name:"description",content:i},ogDesc:{name:"og:description",content:i},twitterDesc:{name:"twitter:description",content:i}}},preFetch:function(t){var e=t.store;e.commit("updateToc",[{id:"Goals",title:"Goals"},{id:"The-Rules-of-a-Great-Git-Commit-Message",title:"The Rules of a Great Git Commit Message"},{id:"Format-of-a-Commit-Message",title:"Format of a Commit Message"},{id:"Example-of-a-Commit-Message",title:"Example of a Commit Message",sub:!0},{id:"Message-Subject-(First-Line)",title:"Message Subject (First Line)"},{id:"Message-Body",title:"Message Body"},{id:"Message-Footer",title:"Message Footer"},{id:"Breaking-Changes",title:"Breaking Changes",sub:!0},{id:"Referencing-Issues",title:"Referencing Issues",sub:!0}])},created:function(){this.nav=[{name:"Project Maintainer Role",category:"Contribution Guide",path:"/contribution-guide/project-maintainer",dir:"left"},{name:"Vue Prototype Injections",category:"Quasar Options & Helpers",path:"/options/vue-prototype-injections",dir:"right"}]},methods:{copyHeading:o["a"]}},p=c,l=s("2877"),v=Object(l["a"])(p,a,n,!1,null,null,null);e["default"]=v.exports}}]);