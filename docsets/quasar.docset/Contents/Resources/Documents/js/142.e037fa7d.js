(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[142],{6283:function(t,e,s){"use strict";s.r(e);var n=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("doc-page",{attrs:{title:"Deploying SSR",nav:t.nav}},[s("p",[t._v("When deploying as a SPA or PWA, the distributables folder that gets generated by Quasar CLI can be served by a static webserver. However, this not the case with a SSR (Server-side Render) build. Your distributables, in this case, contain your production webserver too – which can be tweaked from "),s("code",{staticClass:"doc-token"},[t._v("/src-ssr")]),t._v(".")]),s("p",[t._v("By default, the SSR distributables use "),s("doc-link",{attrs:{to:"https://expressjs.com/"}},[t._v("Express")]),t._v(", but you can replace it with your webserver of choice.")],1),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"The-Distributables-Folder"},on:{click:function(e){return t.copyHeading("The-Distributables-Folder")}}},[t._v("The Distributables Folder")]),s("p",[t._v("After building your app on SSR mode ("),s("code",{staticClass:"doc-token"},[t._v("$ quasar build -m ssr")]),t._v(") the folder that gets generated contains a standalone webserver tweaked for serving with SSR.")]),s("p",[t._v("You’ll notice that it contains a "),s("code",{staticClass:"doc-token"},[t._v("package.json")]),t._v(" file of its own. It has an npm script defined, called “start”:")]),s("pre",{pre:!0,attrs:{class:"doc-code language-js"}},[s("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-js"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"scripts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node index.js"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),s("p",[t._v("So what you need to do when deploying is to copy this distributables folder on your server, yarn/npm install the dependencies inside it, then run "),s("code",{staticClass:"doc-token"},[t._v("$ yarn start")]),t._v(". This boots up the webserver and starts listening for connections.")]),s("div",{staticClass:"doc-note doc-note--tip"},[s("p",{staticClass:"doc-note__title"},[t._v("TIP")]),s("p",[t._v("The distributables folder generated after building your app is standalone. It does NOT require the rest of your project folder to work and it does NOT depend on "),s("code",{staticClass:"doc-token"},[t._v("@quasar/cli")]),t._v(" being installed.")])]),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"Enhancing-Performance"},on:{click:function(e){return t.copyHeading("Enhancing-Performance")}}},[t._v("Enhancing Performance")]),s("p",[t._v("By default, the webserver runs on only one of the available server’s cores. What you could do is make it use all cores. There is a solution for this: "),s("doc-link",{attrs:{to:"http://pm2.keymetrics.io/"}},[t._v("PM2")]),t._v(".")],1),s("p",[t._v("After installing PM2 on your server, your npm start script can look like this instead:")]),s("pre",{pre:!0,attrs:{class:"doc-code language-js"}},[s("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-js"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"scripts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pm2 start index.js"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"Deploying-with-Now.sh"},on:{click:function(e){return t.copyHeading("Deploying-with-Now.sh")}}},[t._v("Deploying with Now.sh")]),s("p",[t._v("Deploying with "),s("doc-link",{attrs:{to:"https://zeit.co/now"}},[t._v("Now")]),t._v(" is a breeze. All you need to do is to follow their "),s("doc-link",{attrs:{to:"https://zeit.co/now#get-started"}},[t._v("installation instructions")]),t._v(". They recommend downloading “Now Desktop” but you can skip that and directly install the Now CLI:")],1),s("pre",{pre:!0,attrs:{class:"doc-code language-bash"}},[s("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-bash"}},[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g now\n$ now login\n")])]),s("p",[t._v("There are several ways to use the v1 of now’s services:")]),s("p",[t._v("The robust way is to add the following file to "),s("code",{staticClass:"doc-token"},[t._v("/dist/ssr/now.json")]),t._v(" , and it should look like this:")]),s("pre",{pre:!0,attrs:{class:"doc-code language-js"}},[s("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-js"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Your Project Name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"version"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),s("p",[t._v("And then cd into the distributables folder and run "),s("code",{staticClass:"doc-token"},[t._v("$ now")]),t._v(". If you do it this way, then you can also execute directly from a github repo, but we’ll leave the details of setting that up to you.")]),s("p",[t._v("If you prefer, however, to set the version from the command line, you can also run "),s("code",{staticClass:"doc-token"},[t._v("now -V 1")]),t._v(".")]),s("p",[t._v("At any rate, you might want to use a “now alias” or connect your domain to Now. And you’re done!")]),s("p",[s("code",{staticClass:"doc-token"},[t._v("Now.sh")]),t._v(" will install the dependencies automatically then run "),s("code",{staticClass:"doc-token"},[t._v("$ yarn start")]),t._v(". Your website will be up and running on an HTTPS connection in a matter of seconds!")])])},o=[],a=s("8669"),r="Deploying SSR | Quasar Framework",i="How to publish a Quasar server-side rendered app.",c={meta:{title:"Deploying SSR",meta:{title:{name:"title",content:r},ogTitle:{name:"og:title",content:r},twitterTitle:{name:"twitter:title",content:r},description:{name:"description",content:i},ogDesc:{name:"og:description",content:i},twitterDesc:{name:"twitter:description",content:i}}},preFetch:function(t){var e=t.store;e.commit("updateToc",[{id:"The-Distributables-Folder",title:"The Distributables Folder"},{id:"Enhancing-Performance",title:"Enhancing Performance"},{id:"Deploying-with-Now.sh",title:"Deploying with Now.sh"}])},created:function(){this.nav=[{name:"Build Commands",category:"Developing SSR",path:"/quasar-cli/developing-ssr/build-commands",dir:"left"},{name:"Introduction",category:"Developing PWA",path:"/quasar-cli/developing-pwa/introduction",dir:"right"}]},methods:{copyHeading:a["a"]}},l=c,d=s("2877"),p=Object(d["a"])(l,n,o,!1,null,null,null);e["default"]=p.exports}}]);