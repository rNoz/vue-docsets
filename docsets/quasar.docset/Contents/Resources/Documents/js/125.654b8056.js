(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[125],{"36e7":function(e,t,o){"use strict";o.r(t);var n=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("doc-page",{attrs:{title:"Electron Preparation",nav:e.nav}},[o("p",[e._v("Before we dive in to the actual development, we need to do some preparation work.")]),o("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"1.-Add-Quasar-Electron-Mode"},on:{click:function(t){return e.copyHeading("1.-Add-Quasar-Electron-Mode")}}},[e._v("1. Add Quasar Electron Mode")]),o("p",[e._v("In order to develop/build a Quasar Electron app, we need to add the Electron mode to our Quasar project. What this does is that it yarn installs some Electron packages and creates "),o("code",{staticClass:"doc-token"},[e._v("/src-electron")]),e._v(" folder.")]),o("pre",{pre:!0,attrs:{class:"doc-code language-bash"}},[o("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-bash"}},[e._v("$ quasar mode "),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" electron\n")])]),o("p",[e._v("Every Electron app has two threads: the main thread (deals with the window and initialization code – from the newly created folder "),o("code",{staticClass:"doc-token"},[e._v("/src-electron")]),e._v(") and the renderer thread (which deals with the actual content of your app from "),o("code",{staticClass:"doc-token"},[e._v("/src")]),e._v(").")]),o("p",[e._v("The new folder has the following structure:")]),o("pre",{pre:!0,attrs:{class:"doc-code language-bash"}},[o("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-bash"}},[o("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n└── src-electron/\n    ├── icons/                 "),o("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Icons of your app for all platforms")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("   ├── icon.icns             "),o("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Icon file for Darwin (MacOS) platform")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("   ├── icon.ico              "),o("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Icon file for win32 (Windows) platform")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("   └── linux-256x256.png     "),o("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Icon file for Linux platform")]),e._v("\n    └── main-process/          "),o("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Main thread source code")]),e._v("\n        ├── electron-main.dev.js  "),o("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Main thread code while developing; read below")]),e._v("\n        └── electron-main.js      "),o("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Main thread code for production")]),e._v("\n")])]),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Electron-main.dev.js"},on:{click:function(t){return e.copyHeading("Electron-main.dev.js")}}},[e._v("Electron-main.dev.js")]),o("p",[e._v("This file ("),o("code",{staticClass:"doc-token"},[e._v("/src-electron/main-process/electron-main.dev.js")]),e._v(") is used specifically for development and is used to install dev-tools. Usually it should not have to be modified, but can be used to extend your development needs. After it sets up dev-tools it imports the "),o("code",{staticClass:"doc-token"},[e._v("electron-main.js")]),e._v(" which is the place you’ll make most (if not all) of your changes.")]),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"A-note-for-Windows-Users"},on:{click:function(t){return e.copyHeading("A-note-for-Windows-Users")}}},[e._v("A note for Windows Users")]),o("p",[e._v("If you run into errors during npm install about node-gyp, then you most likely do not have the proper build tools installed on your system. Build tools include items like Python and Visual Studio. Fortunately, there are a few packages to help simplify this process.")]),o("p",[e._v("The first item we need to check is our npm version and ensure that it is not outdated. This is accomplished using "),o("doc-link",{attrs:{to:"https://github.com/felixrieseberg/npm-windows-upgrade"}},[e._v("npm-windows-upgrade")]),e._v(". If you are using yarn, then you can skip this check.")],1),o("p",[e._v("Once that is complete, we can then continue to setup the needed build tools. Using "),o("doc-link",{attrs:{to:"https://github.com/felixrieseberg/windows-build-tools"}},[e._v("windows-build-tools")]),e._v(", most of the dirty work is done for us. Installing this globally will in turn setup Visual C++ packages, Python, and more.")],1),o("div",{staticClass:"doc-note doc-note--warning"},[o("p",{staticClass:"doc-note__title"},[e._v("Note: April 2019")]),o("p",[e._v("In Powershell.exe (Run as Admin) "),o("code",{staticClass:"doc-token"},[e._v("npm install --global windows-build-tools")]),e._v(" seems to fail at the moment with errors pointing to python2 and vctools. You can get around this with Chocolatey. One-liner install:")]),o("p",[o("strong",[e._v("Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(‘https://chocolatey.org/install.ps1’))")])]),o("p",[e._v("and then run "),o("code",{staticClass:"doc-token"},[e._v("choco upgrade python2 visualstudio2017-workload-vctools")]),e._v(".")])]),o("p",[e._v("At this point things should successfully install, but if not then you will need a clean installation of Visual Studio. Please note that these are not problems with Quasar, but they are related to NPM and Windows.")]),o("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"2.-Start-Developing"},on:{click:function(t){return e.copyHeading("2.-Start-Developing")}}},[e._v("2. Start Developing")]),o("p",[e._v("If you want to jump right in and start developing, you can skip the previous step with “quasar mode” command and issue:")]),o("pre",{pre:!0,attrs:{class:"doc-code language-bash"}},[o("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-bash"}},[e._v("$ quasar dev -m electron\n\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# passing extra parameters and/or options to")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# underlying "electron" executable:')]),e._v("\n$ quasar dev -m electron -- --no-sandbox --disable-setuid-sandbox\n")])]),o("p",[e._v("This will add Electron mode automatically, if it is missing.\nIt will open up an Electron window which will render your app along with Developer Tools opened side by side.")])])},a=[],s=o("8669"),r="Electron Preparation | Quasar Framework",i="How to manage Electron mode into a Quasar app.",c={meta:{title:"Electron Preparation",meta:{title:{name:"title",content:r},ogTitle:{name:"og:title",content:r},twitterTitle:{name:"twitter:title",content:r},description:{name:"description",content:i},ogDesc:{name:"og:description",content:i},twitterDesc:{name:"twitter:description",content:i}}},preFetch:function(e){var t=e.store;t.commit("updateToc",[{id:"1.-Add-Quasar-Electron-Mode",title:"1. Add Quasar Electron Mode"},{id:"Electron-main.dev.js",title:"Electron-main.dev.js",sub:!0},{id:"A-note-for-Windows-Users",title:"A note for Windows Users",sub:!0},{id:"2.-Start-Developing",title:"2. Start Developing"}])},created:function(){this.nav=[{name:"Introduction",category:"Developing Electron Apps",path:"/quasar-cli/developing-electron-apps/introduction",dir:"left"},{name:"Configuring Electron",category:"Developing Electron Apps",path:"/quasar-cli/developing-electron-apps/configuring-electron",dir:"right"}]},methods:{copyHeading:s["a"]}},l=c,d=o("2877"),p=Object(d["a"])(l,n,a,!1,null,null,null);t["default"]=p.exports}}]);