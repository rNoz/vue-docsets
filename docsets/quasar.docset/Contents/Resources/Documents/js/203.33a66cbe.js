(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[203],{d2b5:function(t,e,o){"use strict";o.r(e);var n=function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("doc-page",{attrs:{title:"Button",related:t.related,nav:t.nav}},[o("p",[t._v("Quasar has a component called QBtn which is a button with a few extra useful features. For instance, it comes in two shapes: rectangle (default) and round. It also has the material ripple effect baked in (which can be disabled).")]),o("p",[t._v("The button component also comes with a spinner or loading effect. You would use this for times when app execution may cause a delay and you want to give the user some feedback about that delay. When used, the button will display a spinning animation as soon as the user clicks the button.")]),o("p",[t._v("When not disabled or spinning, QBtn emits a "),o("code",{staticClass:"doc-token"},[t._v("@click")]),t._v(" event, as soon as it is clicked or tapped.")]),o("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"Installation"},on:{click:function(e){return t.copyHeading("Installation")}}},[t._v("Installation")]),o("doc-installation",{attrs:{components:"QBtn"}}),o("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"Usage"},on:{click:function(e){return t.copyHeading("Usage")}}},[t._v("Usage")]),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Standard"},on:{click:function(e){return t.copyHeading("Standard")}}},[t._v("Standard")]),o("doc-example",{attrs:{title:"Standard buttons",file:"QBtn/Standard"}}),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Custom-colors"},on:{click:function(e){return t.copyHeading("Custom-colors")}}},[t._v("Custom colors")]),o("doc-example",{attrs:{title:"Custom colors",file:"QBtn/CustomColor"}}),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"With-icon"},on:{click:function(e){return t.copyHeading("With-icon")}}},[t._v("With icon")]),o("doc-example",{attrs:{title:"With icon",file:"QBtn/WithIcons"}}),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Round"},on:{click:function(e){return t.copyHeading("Round")}}},[t._v("Round")]),o("doc-example",{attrs:{title:"Round buttons",file:"QBtn/Round"}}),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Custom-content"},on:{click:function(e){return t.copyHeading("Custom-content")}}},[t._v("Custom content")]),o("doc-example",{attrs:{title:"Custom content",file:"QBtn/CustomContent"}}),o("doc-example",{attrs:{title:"Truncate label",file:"QBtn/TruncateLabel"}}),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Design"},on:{click:function(e){return t.copyHeading("Design")}}},[t._v("Design")]),o("doc-example",{attrs:{title:"Button design",file:"QBtn/ButtonDesign"}}),o("doc-example",{attrs:{title:"Button alignment",file:"QBtn/ButtonAlignment"}}),o("doc-example",{attrs:{title:"Button size",file:"QBtn/ButtonSize"}}),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Progress-related"},on:{click:function(e){return t.copyHeading("Progress-related")}}},[t._v("Progress related")]),o("p",[t._v("Some button actions involve contacting a server, so an asynchronous response. It’s best that you inform the user about a background process taking place until the asynchronous response is ready. QBtn offers this possibility through the "),o("code",{staticClass:"doc-token"},[t._v("loading")]),t._v(" prop. This property will display a QSpinner (by default) instead of the icon and/or label of the button. Custom loading content can also be used (not only text or spinners).")]),o("doc-example",{attrs:{title:"Indeterminate progress",file:"QBtn/IndeterminateProgress"}}),o("p",[t._v("Should you wish, you can also display a deterministic progress within the button by using the additional "),o("code",{staticClass:"doc-token"},[t._v("percentage")]),t._v(" property along with what you’ve already learned about buttons with progress:")]),o("doc-example",{attrs:{title:"Deterministic progress",file:"QBtn/DeterministicProgress"}}),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Custom-ripple"},on:{click:function(e){return t.copyHeading("Custom-ripple")}}},[t._v("Custom ripple")]),o("doc-example",{attrs:{title:"Custom ripple",file:"QBtn/CustomRipple"}}),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Handling-links"},on:{click:function(e){return t.copyHeading("Handling-links")}}},[t._v("Handling links")]),o("p",[t._v("The two examples below won’t work with UMD version (so in Codepen/jsFiddle too) because it relies on the existence of Vue Router.")]),o("doc-example",{attrs:{title:"Links",file:"QBtn/Links","no-edit":""}}),o("p",[t._v("For more convoluted use-cases, you can also directly use the native Vue "),o("code",{staticClass:"doc-token"},[t._v("<router-link>")]),t._v(" component to wrap a QBtn. This also gives the opportunity to control the state according to app’s current route:")]),o("doc-example",{attrs:{title:"Scoped slot of RouterLink",file:"QBtn/RouterLink","no-edit":""}}),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Other-options"},on:{click:function(e){return t.copyHeading("Other-options")}}},[t._v("Other options")]),o("doc-example",{attrs:{title:"Other options",file:"QBtn/OtherOptions"}}),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Disable"},on:{click:function(e){return t.copyHeading("Disable")}}},[t._v("Disable")]),o("doc-example",{attrs:{title:"Disable",file:"QBtn/Disabled"}}),o("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"Controlling-the-button-for-form-submission"},on:{click:function(e){return t.copyHeading("Controlling-the-button-for-form-submission")}}},[t._v("Controlling the button for form submission")]),o("p",[t._v("When you have a button to submit a form’s input to the server, like a “Save” button, more often than not you will also want to give the user the ability to submit the form with a press of the ENTER key. If you would also like to give the user feedback of the saving process being in progress, and to prevent the user repeatedly pressing the button, you would need the button to show a loading spinner and be disabled from click events. QBtn allows this behavior if configured so.")]),o("div",{staticClass:"doc-note doc-note--warning"},[o("p",{staticClass:"doc-note__title"},[t._v("WARNING")]),o("p",[t._v("When placing a QBtn with type “submit” in one of the “before”, “after”, “prepend”, or “append” slots of a QField, QInput or QSelect, you should also add a "),o("code",{staticClass:"doc-token"},[t._v("@click")]),t._v(" listener on the QBtn in question. This listener should call the method that submits your form. All “click” events in such slots are not propagated to their parent elements.")])]),o("doc-example",{attrs:{title:"Form Submission",file:"QBtn/FormSubmission"}}),o("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"QBtn-API"},on:{click:function(e){return t.copyHeading("QBtn-API")}}},[t._v("QBtn API")]),o("doc-api",{attrs:{file:"QBtn"}})],1)},i=[],s=o("8669"),a="Button | Quasar Framework",r="The QBtn Vue component is a button with features like shaping, loading state, ripple and more.",l={meta:{title:"Button",meta:{title:{name:"title",content:a},ogTitle:{name:"og:title",content:a},twitterTitle:{name:"twitter:title",content:a},description:{name:"description",content:r},ogDesc:{name:"og:description",content:r},twitterDesc:{name:"twitter:description",content:r}}},preFetch:function(t){var e=t.store;e.commit("updateToc",[{id:"Installation",title:"Installation"},{id:"Usage",title:"Usage"},{id:"Standard",title:"Standard",sub:!0},{id:"Custom-colors",title:"Custom colors",sub:!0},{id:"With-icon",title:"With icon",sub:!0},{id:"Round",title:"Round",sub:!0},{id:"Custom-content",title:"Custom content",sub:!0},{id:"Design",title:"Design",sub:!0},{id:"Progress-related",title:"Progress related",sub:!0},{id:"Custom-ripple",title:"Custom ripple",sub:!0},{id:"Handling-links",title:"Handling links",sub:!0},{id:"Other-options",title:"Other options",sub:!0},{id:"Disable",title:"Disable",sub:!0},{id:"Controlling-the-button-for-form-submission",title:"Controlling the button for form submission",sub:!0},{id:"QBtn-API",title:"QBtn API"}])},created:function(){this.related=[{name:"Button Group",category:"Buttons",path:"/vue-components/button-group"},{name:"Button Dropdown",category:"Buttons",path:"/vue-components/button-dropdown"},{name:"Button Toggle",category:"Form Components",path:"/vue-components/button-toggle"}],this.nav=[{name:"Breadcrumbs",category:"Vue Components",path:"/vue-components/breadcrumbs",dir:"left"},{name:"Button Group",category:"Buttons",path:"/vue-components/button-group",dir:"right"}]},methods:{copyHeading:s["a"]}},c=l,d=o("2877"),u=Object(d["a"])(c,n,i,!1,null,null,null);e["default"]=u.exports}}]);